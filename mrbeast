-- Load Kavo UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Mob Teleport GUI", "DarkTheme")

local TeleportTab = Window:NewTab("Teleport")
local TeleportSection = TeleportTab:NewSection("Mob Teleport")

-- Player reference
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

player.CharacterAdded:Connect(function(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end)

-- List of mob name patterns you want to track
local mobNamePatterns = {
    "Glutto2",
    "Glutto3",
    "Clerick2",
    "TwigfaceGardener4"
}

-- Function to find all matching mobs dynamically
local function getTargets()
    local targets = {}
    for _, mobModel in pairs(workspace:WaitForChild("Mobs"):GetChildren()) do
        for _, pattern in ipairs(mobNamePatterns) do
            if mobModel.Name:find(pattern) then
                -- Try to pick PrimaryPart or first BasePart
                local part
                if mobModel.PrimaryPart then
                    part = mobModel.PrimaryPart
                else
                    part = mobModel:FindFirstChildWhichIsA("BasePart")
                end
                if part then
                    table.insert(targets, part)
                end
            end
        end
    end
    return targets
end

-- === Universal toggle ===
local teleporting = false
TeleportSection:NewToggle("Auto Teleport Behind Mobs", "Teleports behind any mob with matching names", function(state)
    teleporting = state
    if teleporting then
        task.spawn(function()
            while teleporting do
                if hrp then
                    for _, mobPart in ipairs(getTargets()) do
                        if mobPart and mobPart:IsDescendantOf(workspace) then
                            hrp.CFrame = mobPart.CFrame * CFrame.new(0, 0, 5) -- behind mob
                            task.wait(0.3) -- small delay between each mob
                        end
                    end
                end
                task.wait(0.5) -- refresh rate to catch respawns
            end
        end)
    end
end)
