--// === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

--// === Tabs ===
local Tabs = {
	Teleport = Window:NewTab("Main"),
	Travel   = Window:NewTab("Island Travel"),
	Train    = Window:NewTab("Train"),
	Auto     = Window:NewTab("Auto"),
	Shop     = Window:NewTab("Shop"),
	Lunar    = Window:NewTab("Lunar/Volcano")
}

local Sections = {
	Teleport = Tabs.Teleport:NewSection("Teleport Controls"),
	Travel   = Tabs.Travel:NewSection("Quick TP Buttons"),
	Train    = Tabs.Train:NewSection("Training Features"),
	Auto     = Tabs.Auto:NewSection("Automation"),
	Shop     = Tabs.Shop:NewSection("Shop Items"),
	Lunar    = Tabs.Lunar:NewSection("Special Teleports & Lava")
}

--// === Services ===
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Islands = Workspace:WaitForChild("Islands", 9e9)
local Explorer = Workspace:FindFirstChild("Explorer")

--// === Character Connection ===
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

LocalPlayer.CharacterAdded:Connect(function(newChar)
	Character = newChar
	HRP = newChar:WaitForChild("HumanoidRootPart")
end)

--// === Config ===
local IslandNames = {
	"Mainland", "Forest Island", "Mountain Island", "Lunar Islands",
	"Royal Island", "Blizzard Island", "Jungle Island",
	"Volcano Island", "Desert Island", "Glacier Island", "The Magical Forest"
}

local Exclusions = {
	["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
	["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
	["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
	["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
	["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
	["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
	["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
	["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
	["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
	["Horse"] = true,
	["Travel Boat"] = true,
	["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true,
}

--// === Utility Functions ===
local function safeWaitFor(obj, name)
	if not obj then return nil end
	local ok, res = pcall(function() return obj:WaitForChild(name, 3) end)
	return ok and res or nil
end

local function isValidBody(model)
	return model
		and model:IsA("Model")
		and not Exclusions[model.Name]
		and model:FindFirstChild("Body")
		and model.Body:IsA("BasePart")
end

local function getAllBodies(islandName)
	local bodies = {}

	-- 1️⃣ Workspace top-level UUIDs
	for _, model in ipairs(Workspace:GetChildren()) do
		if isValidBody(model) then
			table.insert(bodies, model.Body)
		end
	end

	-- 2️⃣ Island folder
	local folder = Islands:FindFirstChild(islandName)
	if folder then
		for _, model in ipairs(folder:GetChildren()) do
			if isValidBody(model) then
				table.insert(bodies, model.Body)
			end
		end
	end

	-- 3️⃣ Explorer folder
	if Explorer then
		local expFolder = Explorer:FindFirstChild(islandName)
		if expFolder then
			for _, model in ipairs(expFolder:GetChildren()) do
				if isValidBody(model) then
					table.insert(bodies, model.Body)
				end
			end
		end
	end

	return bodies
end

--// === Teleport Toggles ===
local TeleportToggles = {}
for _, island in ipairs(IslandNames) do
	TeleportToggles[island] = false
	Sections.Teleport:NewToggle("Teleport " .. island, "Teleport to " .. island, function(state)
		TeleportToggles[island] = state
	end)
end

--// === Teleport Loop (efficient + safe) ===
task.spawn(function()
	while task.wait(0.3) do
		if not HRP or not HRP.Parent then continue end
		for island, enabled in pairs(TeleportToggles) do
			if enabled then
				local bodies = getAllBodies(island)
				if #bodies > 0 then
					local body = bodies[1]
					if body and body:IsDescendantOf(Workspace) then
						pcall(function()
							HRP.CFrame = body.CFrame + Vector3.new(0, 5, 0)
						end)
					end
				end
			end
		end
	end
end)

--// === Quick Travel Buttons ===
local function safeRemoteFire(funcIndex, ...)
	local ok, comm = pcall(function()
		return ReplicatedStorage:WaitForChild("Communication", 9e9)
			:WaitForChild("Functions", 9e9):GetChildren()[funcIndex]
	end)
	if ok and comm and comm.FireServer then
		pcall(comm.FireServer, comm, ...)
	else
		warn("⚠️ Failed to fire remote:", funcIndex)
	end
end

for _, island in ipairs(IslandNames) do
	Sections.Travel:NewButton("Travel to " .. island, "Use teleport remote", function()
		safeRemoteFire(2, "\1", "Travel", island, 1)
	end)
end

--// === Special Positions ===
local PositionsByIsland = {
	["Lunar Islands"] = {
		Vector3.new(-3097, 17, -3681),
		Vector3.new(-2759, 6, -2589),
		Vector3.new(-2207, 139, -1223),
		Vector3.new(-3266, 15, -1436),
		Vector3.new(-3357, 24, -2428),
	},
	["Volcano Island"] = {
		Vector3.new(2964, 108, -7078),
		Vector3.new(4134, 27, -6894),
		Vector3.new(4757, 26, -7939),
		Vector3.new(3487, 20, -8586),
	},
	-- Add others if needed...
}

local IslandExplore = {}
for name in pairs(PositionsByIsland) do
	IslandExplore[name] = false
	Sections.Lunar:NewToggle(name .. " Explore", "Teleport to UUIDs or preset coords", function(state)
		IslandExplore[name] = state
	end)
end

--// === Island Explore Loop ===
task.spawn(function()
	while task.wait(0.4) do
		for island, enabled in pairs(IslandExplore) do
			if enabled and HRP then
				local bodies = getAllBodies(island)
				if #bodies > 0 then
					local body = bodies[1]
					if body then
						pcall(function()
							HRP.CFrame = body.CFrame + Vector3.new(0, 5, 0)
						end)
					end
				else
					for _, pos in ipairs(PositionsByIsland[island]) do
						if not IslandExplore[island] then break end
						pcall(function()
							HRP.CFrame = CFrame.new(pos + Vector3.new(0, 5, 0))
						end)
						task.wait(10)
					end
				end
			end
		end
	end
end)

--// === Volcano Lava Cleanup ===
local LavaCleanupActive = false
Sections.Lunar:NewToggle("Remove Volcano Lava", "Deletes Volcano Island LavaParts periodically", function(state)
	LavaCleanupActive = state
	if state then
		task.spawn(function()
			while LavaCleanupActive do
				local lavaFolder = safeWaitFor(Islands:FindFirstChild("Volcano Island"), "LavaParts")
				if lavaFolder then
					pcall(lavaFolder.Destroy, lavaFolder)
				end
				task.wait(180)
			end
		end)
	end
end)

print("✅ All Islands Teleport GUI initialized safely.")
