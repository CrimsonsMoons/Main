-- === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

local AutoTab = Window:NewTab("Auto")
local AutoSection = AutoTab:NewSection("Automation")

local ShopTab = Window:NewTab("Shop")
local ShopSection = ShopTab:NewSection("Shop Items")

local LunarVolcanoTab = Window:NewTab("Lunar/Volcano")
local LunarVolcanoSection = LunarVolcanoTab:NewSection("Special Teleports & Lava")

-- === Initialization ===
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local islandsFolder = workspace:WaitForChild("Islands")
local explorerFolder = workspace:FindFirstChild("Explorer")

player.CharacterAdded:Connect(function(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end)

-- === Island Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
    ["The Magical Forest"] = {},
}

-- === Universal Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
    ["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true,
}

-- === Function to get all UUID Body parts ===
local function getAllBodies(islandName)
    local bodies = {}

    -- Workspace direct children (only UUIDs)
    for _, model in ipairs(workspace:GetChildren()) do
        -- Check if name looks like a UUID (starts with "{" and ends with "}")
        if model:IsA("Model") and model.Name:match("^%b{}$") and not exclusions[model.Name] then
            local body = model:FindFirstChild("Body")
            if body and body:IsA("BasePart") then
                table.insert(bodies, body)
            end
        end
    end

    -- Islands folder
    local folder = islandsFolder:FindFirstChild(islandName)
    if folder then
        for _, model in ipairs(folder:GetChildren()) do
            if not exclusions[model.Name] then
                local body = model:FindFirstChild("Body")
                if body and body:IsA("BasePart") then
                    table.insert(bodies, body)
                end
            end
        end
    end

    -- Explorer folder
    if explorerFolder then
        local folder = explorerFolder:FindFirstChild(islandName)
        if folder then
            for _, model in ipairs(folder:GetChildren()) do
                if not exclusions[model.Name] then
                    local body = model:FindFirstChild("Body")
                    if body and body:IsA("BasePart") then
                        table.insert(bodies, body)
                    end
                end
            end
        end
    end

    return bodies
end

-- === Teleport Toggles for All Islands in Main Tab ===
local teleportToggles = {}
for islandName, _ in pairs(islandConfigs) do
    teleportToggles[islandName] = false

    TeleportSection:NewToggle("Teleport " .. islandName, "Teleport to " .. islandName, function(state)
        teleportToggles[islandName] = state
    end)

    task.spawn(function()
        while true do
            if teleportToggles[islandName] then
                local bodies = getAllBodies(islandName)
                if #bodies > 0 then
                    for _, body in ipairs(bodies) do
                        while teleportToggles[islandName] and body:IsDescendantOf(workspace) do
                            hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                            task.wait(0.06)
                        end
                    end
                end
                task.wait(0.9)
            else
                task.wait(2.5)
            end
        end
    end)
end

-- === Travel Buttons ===
for islandName in pairs(islandConfigs) do
    TravelSection:NewButton("Travel to " .. islandName, "Use teleport remote", function()
        local args = {"\1", "Travel", islandName, 1}
        game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
            :WaitForChild("Functions", 9e9):GetChildren()[2]:FireServer(unpack(args))
    end)
end

-- === Positions for Special Islands ===
local positionsByIsland = {
    ["Forest Island"] = {
        Vector3.new(-7839, 96, 4180),
        Vector3.new(-7945, 91, 3557),
        Vector3.new(-7878, 135, 2901),
    },
    ["Mountain Island"] = {
        Vector3.new(-6715, 276, 10),
        Vector3.new(-6102, 349, -242),
        Vector3.new(-6962, 304, -778),
    },
    ["Lunar Islands"] = {
        Vector3.new(-3097.42, 17.63, -3681.29),
        Vector3.new(-2759.49, 6.74, -2589.20),
        Vector3.new(-2207.14, 139.06, -1223.94),
        Vector3.new(-3266.90, 15.43, -1436.56),
        Vector3.new(-3357.76, 24.34, -2428.62),
    },
    ["Royal Island"] = {
        Vector3.new(253.7, 94, -5399),
        Vector3.new(-372, 156, -6136),
        Vector3.new(617, 6.8, -6002),
    },
    ["Blizzard Island"] = {
        Vector3.new(-428, 138, -3859),
        Vector3.new(-937, 14, -3897),
        Vector3.new(244, 15, -3563),
    },
    ["Jungle Island"] = {
        Vector3.new(3396, 15, 1080),
        Vector3.new(3616, 65, 2149),
        Vector3.new(3763, 16, 3143),
    },
    ["Volcano Island"] = {
        Vector3.new(2964.74, 108.94, -7078.36),
        Vector3.new(4134.52, 27.04, -6894.68),
        Vector3.new(4757.52, 26.13, -7939.00),
        Vector3.new(3487.48, 20.99, -8586.85),
    },
    ["Desert Island"] = {
        Vector3.new(1050, 15, 4095),
        Vector3.new(156, 31, 4065),
        Vector3.new(-517, 38, 4221),
    },
    ["Glacier Island"] = {
        Vector3.new(2718, 115, -74),
        Vector3.new(2438, 196, -763),
        Vector3.new(3102, 147, -911),
        Vector3.new(3125, 82, -74),
    },
}

-- === Lunar/Volcano Island Teleport Function ===
local function exploreIsland(islandName, positions, toggleVar)
    task.spawn(function()
        while true do
            if toggleVar.value then
                local folder = islandsFolder:FindFirstChild(islandName) or (explorerFolder and explorerFolder:FindFirstChild(islandName))
                if not folder then task.wait(2.1) continue end

                for _, pos in ipairs(positions) do
                    if not toggleVar.value then break end

                    local bodies = getAllBodies(islandName)
                    if #bodies > 0 then
                        for _, body in ipairs(bodies) do
                            while toggleVar.value and body:IsDescendantOf(workspace) do
                                hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                                task.wait(0.08)
                            end
                        end
                    else
                        hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
                        task.wait(12)
                    end
                end
            else
                task.wait(2.5)
            end
        end
    end)
end

-- === Create toggles for every special island ===
local islandToggles = {}
for islandName, positions in pairs(positionsByIsland) do
    islandToggles[islandName] = {value=false}
    LunarVolcanoSection:NewToggle(islandName .. " Explore", "Teleport to UUID.Body parts, then next position", function(state)
        islandToggles[islandName].value = state
    end)
    exploreIsland(islandName, positions, islandToggles[islandName])
end

-- === Volcano Lava Removal Toggle ===
local removeLavaEnabled = false
LunarVolcanoSection:NewToggle("Remove Volcano Lava", "Deletes Volcano Island LavaParts every 60 seconds", function(state)
    removeLavaEnabled = state
    if state then
        task.spawn(function()
            while removeLavaEnabled do
                local lavaFolder = workspace:FindFirstChild("Islands")
                    and workspace.Islands:FindFirstChild("Volcano Island")
                    and workspace.Islands["Volcano Island"]:FindFirstChild("LavaParts")
                if lavaFolder then
                    lavaFolder:Destroy()
                end
                task.wait(200)
            end
        end)
    end
end)



-- === Training Buttons ===
TrainSection:NewButton("Single Script", "Runs Single Route Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/Single%20tp%20v2", true))()
end)

TrainSection:NewButton("Training", "Creates a red box around your character", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/All%20Training", true))()
end)

TrainSection:NewButton("Hurry Scurry", "Runs Hurry Scurry Script", function()
    local args = {
        [1] = "SelectLayout";
        [2] = workspace:WaitForChild("Islands", 9e9):WaitForChild("Training Island", 9e9):WaitForChild("Outdoor Arena", 9e9):WaitForChild("DynamicArena", 9e9);
        [3] = 3;
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9):GetChildren()[45]:FireServer(unpack(args))

    local args2 = {
        [1] = "TriggerInteractable";
        [2] = workspace:WaitForChild("Islands", 9e9):WaitForChild("Training Island", 9e9):WaitForChild("Outdoor Arena", 9e9):WaitForChild("DynamicArena", 9e9):WaitForChild("_LAYOUT", 9e9):WaitForChild("CheckpointActivity", 9e9);
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9):GetChildren()[36]:FireServer(unpack(args2))
end)

-- (You can keep adding your remaining Train buttons, toggles, Auto, Shop, Lunar/Volcano tabs and toggles as in your original code...)



TrainSection:NewButton("Loop", "Runs Single Route Script", function()
    task.spawn(function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Communication = ReplicatedStorage:WaitForChild("Communication", 9e9)
        local Events = Communication:WaitForChild("Events", 9e9)
        local targetEvent = Events:GetChildren()[36]

        local function runSequence()
            -- Fire "Quit"
            local quitArgs = {
                [1] = "Quit";
            }
            targetEvent:FireServer(unpack(quitArgs))

            wait(1)

            -- Fire "TriggerInteractable"
            local checkpoint = workspace:WaitForChild("Islands", 9e9)
                :WaitForChild("Training Island", 9e9)
                :WaitForChild("Outdoor Arena", 9e9)
                :WaitForChild("DynamicArena", 9e9)
                :WaitForChild("_LAYOUT", 9e9)
                :WaitForChild("CheckpointActivity", 9e9)

            local interactArgs = {
                [1] = "TriggerInteractable";
                [2] = checkpoint;
            }

            targetEvent:FireServer(unpack(interactArgs))
        end

        while true do
            runSequence()
            wait(60)
        end
    end)
end)


local teleportTask
local running = false

TrainSection:NewToggle("Start Teleport Loop", "Teleports player and NPCs through checkpoints", function(state)
    running = state

    -- Helper functions inside toggle (or outside if you prefer)
    local function freezeJumpLoop(npcs)
        task.spawn(function()
            while running do
                local char = game.Players.LocalPlayer.Character
                if char then
                    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if humanoid and hrp and humanoid.Health > 0 then
                        humanoid.Jump = true
                        humanoid.PlatformStand = true
                        hrp.Anchored = true
                    end
                end

                for _, npc in ipairs(npcs) do
                    if npc and npc.Parent then
                        local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
                        local root = npc.PrimaryPart
                        if humanoid and root and humanoid.Health > 0 then
                            humanoid.Jump = true
                            humanoid.PlatformStand = true
                            root.Anchored = true
                        end
                    end
                end

                task.wait(0.1)
            end
        end)
    end

    local function unfreezeJumpLoop(npcs)
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildWhichIsA("Humanoid")
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if humanoid and hrp then
                humanoid.PlatformStand = false
                hrp.Anchored = false
            end
        end

        for _, npc in ipairs(npcs) do
            if npc and npc.Parent then
                local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
                local root = npc.PrimaryPart
                if humanoid and root then
                    humanoid.PlatformStand = false
                    root.Anchored = false
                end
            end
        end
    end

    local function teleportToCheckpoint(checkpointName, npcs)
        local checkpointsFolder = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena._LAYOUT.CheckpointActivity.Routes
        local route = checkpointsFolder["1"]
        if not route then
            warn("Route '1' not found in checkpoints.")
            return
        end

        local checkpoint = route:FindFirstChild(checkpointName)
        if not checkpoint or not checkpoint:IsA("BasePart") then
            warn("Checkpoint '"..checkpointName.."' not found or invalid.")
            return
        end

        local char = game.Players.LocalPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if hrp and hrp.Parent then
            hrp.CFrame = checkpoint.CFrame + Vector3.new(2, 3, 0)
        end

        for _, npc in ipairs(npcs) do
            if npc.PrimaryPart and npc.PrimaryPart.Parent then
                npc:SetPrimaryPartCFrame(checkpoint.CFrame + Vector3.new(-2, 3, 0))
            end
        end
    end

    local function getNPCs()
        local folder = workspace.Islands["Training Island"]
        local npcList = {}
        local uuids = {
            "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
            "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
            "{d2227f02-c482-4911-b201-7e842b31c47c}",
            "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
            "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
        }
        local function isUUID(str)
            return string.match(str, "^%b{}$") ~= nil
        end

        for _, uuid in ipairs(uuids) do
            local model = folder:FindFirstChild(uuid)
            if model and model:IsA("Model") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end

        for _, model in ipairs(folder:GetDescendants()) do
            if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
                if model:FindFirstChildWhichIsA("Humanoid") then
                    local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                    if root then
                        model.PrimaryPart = root
                        table.insert(npcList, model)
                    end
                end
            end
        end

        return npcList
    end

    local checkpointOrder = {"1", "2", "3", "4", "5", "6"}

    if state then
        teleportTask = task.spawn(function()
            local npcs = getNPCs()
            freezeJumpLoop(npcs)
            while running do
                for _, checkpointName in ipairs(checkpointOrder) do
                    if not running then break end
                    teleportToCheckpoint(checkpointName, npcs)
                    task.wait(1.4)
                end
            end
            unfreezeJumpLoop(npcs)
        end)
    else
        running = false
        if teleportTask then
            task.cancel(teleportTask)
            teleportTask = nil
        end
        unfreezeJumpLoop(getNPCs())
    end
end)


local crosscountryEnabled = false
TrainSection:NewToggle("Cross Country", "Auto Catch Script", function(state)
    crosscountryEnabled = state
    if state then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/Cross%20v1", true))()
    end
end)

-- === Auto Catch Toggles ===
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Reconnect on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HumanoidRootPart = char:WaitForChild("HumanoidRootPart")
end)

-- === Tool UUIDs ===
local TOOL_UUIDS = {
    "{4ba69e17-8de2-43a2-ac9a-f1d1e425be9b}",
    "{634dc3c2-1694-4273-92d2-adf8f7ade91f}",
    "{51ba4466-f758-4d1c-970d-aad27326dbaf}",
    "{06905d54-7826-417e-bfc7-82d326a30885}",
    "{7138d7c4-9482-4257-868c-4bd1fd99f529}",
    "{5dab28e4-4bfb-430b-86fe-530bafa237b5}",
    "{838c92de-e5a1-440a-8904-d2ccb1ff62e3}",
    "{cd4c34c5-99a6-4f28-ac73-bfad7c8e1ca2}",
}

-- === Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{c91d0e3a-e8c6-4e70-b274-9b7304ffbb28}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["{980efa15-9598-4070-b1c2-344bd80cce25}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
}

-- === Island Folders ===
local islandFolders = {
    "Mainland",
    "Forest Island",
    "Mountain Island",
    "Lunar Islands",
    "Royal Island",
    "Blizzard Island",
    "Jungle Island",
    "Volcano Island",
    "Desert Island",
    "The Magical Forest",
}

-- === Remote ===
local remote = ReplicatedStorage:WaitForChild("Communication"):WaitForChild("Events"):GetChildren()[13]

-- === Settings ===
local CATCH_RADIUS = 15
local CATCH_COOLDOWN = .5
local lastCaught = {}

local function isUUID(name)
    return typeof(name) == "string" and name:match("^%b{}$") ~= nil
end

-- === Toggle Integration ===
local autoCatchEnabled = false
AutoSection:NewToggle("Islands 1,2,3", "Auto Catch Script", function(state)
    autoCatchEnabled = state
    if state then
        task.spawn(function()
            while autoCatchEnabled do
                task.wait(0.1)

                if not HumanoidRootPart or not HumanoidRootPart.Parent then
                    continue
                end

                local playerPos = HumanoidRootPart.Position
                local now = os.clock()

                -- Check island folders
                for _, islandName in ipairs(islandFolders) do
                    local islandFolder = Workspace:FindFirstChild("Islands") and Workspace.Islands:FindFirstChild(islandName)
                    if islandFolder then
                        for _, child in ipairs(islandFolder:GetChildren()) do
                            local body = child:FindFirstChild("Body")
                            if body and isUUID(child.Name) and not exclusions[child.Name] then
                                local dist = (body.Position - playerPos).Magnitude
                                if dist <= CATCH_RADIUS and (not lastCaught[child] or now - lastCaught[child] > CATCH_COOLDOWN) then
                                    for _, tool in ipairs(TOOL_UUIDS) do
                                        remote:FireServer(tool, "Activate", child)
                                    end
                                    lastCaught[child] = now
                                    print("Caught:", child.Name, "at", islandName, "Distance:", math.floor(dist))
                                end
                            end
                        end
                    end
                end

                -- Check top-level Workspace UUID models
                for _, child in ipairs(Workspace:GetChildren()) do
                    local body = child:FindFirstChild("Body")
                    if body and isUUID(child.Name) and not exclusions[child.Name] then
                        local dist = (body.Position - playerPos).Magnitude
                        if dist <= CATCH_RADIUS and (not lastCaught[child] or now - lastCaught[child] > CATCH_COOLDOWN) then
                            for _, tool in ipairs(TOOL_UUIDS) do
                                remote:FireServer(tool, "Activate", child)
                            end
                            lastCaught[child] = now
                            print("Caught top-level:", child.Name, "Distance:", math.floor(dist))
                        end
                    end
                end
            end
        end)
    end
end)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- === Tool UUIDs ===
local TOOL_UUIDS = {
    "{b3766c24-da18-40f0-be56-66dba5e882d8}",
    "{cd4c34c5-99a6-4f28-ac73-bfad7c8e1ca2}",
    "{efe4b787-0112-42f2-a83c-659149e1de5c}",
    "{91c7c7cc-0b88-4450-9cd5-18063fa4fea0}",
}

-- === Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{c91d0e3a-e8c6-4e70-b274-9b7304ffbb28}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["{980efa15-9598-4070-b1c2-344bd80cce25}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
}

-- === Island Folders ===
local islandFolders = {
    "Mountain Island",
    "Royal Island",
    "Desert Island",
    "Glacier Island",
}

-- === Remote ===
local remote = ReplicatedStorage:WaitForChild("Communication"):WaitForChild("Events"):GetChildren()[10]

-- === Settings ===
local CATCH_RADIUS = 15
local CATCH_COOLDOWN = 0.5
local lastCaught = {}

-- === Utility ===
local function isUUID(name)
    return typeof(name) == "string" and name:match("^%b{}$") ~= nil
end

-- === Toggle Logic ===
local autoCatch2Enabled = false
AutoSection:NewToggle("4,5,6", "Auto Catch Script 2", function(state)
    autoCatch2Enabled = state
    if state then
        task.spawn(function()
            while autoCatch2Enabled do
                local playerPos = HumanoidRootPart.Position

                -- Check island folders
                for _, islandName in ipairs(islandFolders) do
                    local islandFolder = Workspace:FindFirstChild("Islands"):FindFirstChild(islandName)
                    if islandFolder then
                        for _, child in ipairs(islandFolder:GetChildren()) do
                            local body = child:FindFirstChild("Body")
                            if body and isUUID(child.Name) and not exclusions[child.Name] then
                                local dist = (body.Position - playerPos).Magnitude
                                local now = os.clock()
                                if dist <= CATCH_RADIUS and (not lastCaught[child] or now - lastCaught[child] > CATCH_COOLDOWN) then
                                    for _, tool in ipairs(TOOL_UUIDS) do
                                        remote:FireServer(tool, "Activate", child)
                                    end
                                    lastCaught[child] = now
                                    print("Caught:", child.Name, "at", islandName, "Distance:", math.floor(dist))
                                end
                            end
                        end
                    end
                end

                -- Check top-level Workspace UUID models
                for _, child in ipairs(Workspace:GetChildren()) do
                    local body = child:FindFirstChild("Body")
                    if body and isUUID(child.Name) and not exclusions[child.Name] then
                        local dist = (body.Position - playerPos).Magnitude
                        local now = os.clock()
                        if dist <= CATCH_RADIUS and (not lastCaught[child] or now - lastCaught[child] > CATCH_COOLDOWN) then
                            for _, tool in ipairs(TOOL_UUIDS) do
                                remote:FireServer(tool, "Activate", child)
                            end
                            lastCaught[child] = now
                            print("Caught top-level:", child.Name, "Distance:", math.floor(dist))
                        end
                    end
                end

                task.wait(0.3)
            end
        end)
    end
end)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- === Tool UUIDs ===
local TOOL_UUIDS = {
    "{634dc3c2-1694-4273-92d2-adf8f7ade91f}",
    "{06905d54-7826-417e-bfc7-82d326a30885}",
    "{5dab28e4-4bfb-430b-86fe-530bafa237b5}",
    "{cd4c34c5-99a6-4f28-ac73-bfad7c8e1ca2}",
    "{b3766c24-da18-40f0-be56-66dba5e882d8}",
    "{efe4b787-0112-42f2-a83c-659149e1de5c}",
    "{91c7c7cc-0b88-4450-9cd5-18063fa4fea0}",
}

-- === Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{c91d0e3a-e8c6-4e70-b274-9b7304ffbb28}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["{980efa15-9598-4070-b1c2-344bd80cce25}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
}

-- === Island Folders ===
local islandFolders = {
    "Lunar Islands",
    "Jungle Island",
    "Volcano Island",
}

-- === Remote ===
local remote = ReplicatedStorage:WaitForChild("Communication"):WaitForChild("Events"):GetChildren()[10]

-- === Settings ===
local CATCH_RADIUS = 15
local CATCH_COOLDOWN = 0.5
local lastCaught = {}

-- === Utility ===
local function isUUID(name)
    return typeof(name) == "string" and name:match("^%b{}$") ~= nil
end

-- === Toggle Logic ===
local autoCatch3Enabled = false
AutoSection:NewToggle("7,8,9", "Auto Catch Script 3", function(state)
    autoCatch3Enabled = state
    if state then
        task.spawn(function()
            while autoCatch3Enabled do
                local playerPos = HumanoidRootPart.Position

                -- Check island folders
                for _, islandName in ipairs(islandFolders) do
                    local islands = Workspace:FindFirstChild("Islands")
                    local islandFolder = islands and islands:FindFirstChild(islandName)
                    if islandFolder then
                        for _, child in ipairs(islandFolder:GetChildren()) do
                            local body = child:FindFirstChild("Body")
                            if body and isUUID(child.Name) and not exclusions[child.Name] then
                                local dist = (body.Position - playerPos).Magnitude
                                local now = os.clock()
                                if dist <= CATCH_RADIUS and (not lastCaught[child] or now - lastCaught[child] > CATCH_COOLDOWN) then
                                    for _, tool in ipairs(TOOL_UUIDS) do
                                        remote:FireServer(tool, "Activate", child)
                                    end
                                    lastCaught[child] = now
                                    print("Caught:", child.Name, "at", islandName, "Distance:", math.floor(dist))
                                end
                            end
                        end
                    end
                end

                -- Check top-level Workspace UUID models
                for _, child in ipairs(Workspace:GetChildren()) do
                    local body = child:FindFirstChild("Body")
                    if body and isUUID(child.Name) and not exclusions[child.Name] then
                        local dist = (body.Position - playerPos).Magnitude
                        local now = os.clock()
                        if dist <= CATCH_RADIUS and (not lastCaught[child] or now - lastCaught[child] > CATCH_COOLDOWN) then
                            for _, tool in ipairs(TOOL_UUIDS) do
                                remote:FireServer(tool, "Activate", child)
                            end
                            lastCaught[child] = now
                            print("Caught top-level:", child.Name, "Distance:", math.floor(dist))
                        end
                    end
                end

                task.wait(0.3)
            end
        end)
    end
end)


-- === Sell Toggles ===
local sellSpecials = false
AutoSection:NewToggle("Sell Specials", "Sell all special (unlocked) items every 5s", function(toggle)
    sellSpecials = toggle
    if toggle then
        task.spawn(function()
            while sellSpecials do
                loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/Sell%20Specials", true))()
                task.wait(5)
            end
        end)
    end
end)

local sellSpecials3 = false
AutoSection:NewToggle("Sell Specials3", "Sell all special (unlocked) items every 5s", function(toggle)
    sellSpecials3 = toggle
    if toggle then
        task.spawn(function()
            while sellSpecials3 do
                loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/Auto%20Sell%20Specials%203", true))()
                task.wait(5)
            end
        end)
    end
end)

local autoSellAll = false
AutoSection:NewToggle("Auto Sell", "Sells all unlocked, non-special items every 5s", function(toggle)
    autoSellAll = toggle
    if toggle then
        task.spawn(function()
            while autoSellAll do
                loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/auto%20sell2", true))()
                task.wait(5)
            end
        end)
    end
end)

local autoSell3Enabled = false
AutoSection:NewToggle("Auto Sell 3", "Loop auto sell3 every 0.5 seconds", function(state)
    autoSell3Enabled = state
    if state then
        task.spawn(function()
            while autoSell3Enabled do
                loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/auto%20sell3", true))()
                task.wait(0.5)
            end
        end)
    end
end)

local autoSell4Enabled = false
AutoSection:NewToggle("Auto Sell 4", "Loop auto sell4 every 0.5 seconds", function(state)
    autoSell4Enabled = state
    if state then
        task.spawn(function()
            while autoSell4Enabled do
                loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/auto%20sell4", true))()
                task.wait(0.5)
            end
        end)
    end
end)

local autoSellAccEnabled = false
AutoSection:NewToggle("Auto Sell Acc", "Auto sell accessories every 5 seconds", function(state)
    autoSellAccEnabled = state
    if state then
        task.spawn(function()
            while autoSellAccEnabled do
                loadstring(game:HttpGet("https://raw.githubusercontent.com/CrimsonsMoons/Jasmine/refs/heads/main/auto%20sell%20acc", true))()
                task.wait(5)
            end
        end)
    end
end)

-- Auto Fish Toggle
local autoFish = false
local autoFishConnection

AutoSection:NewToggle("Auto Fish", "Automatically catches fish", function(state)
    autoFish = state

    if autoFish then
        autoFishConnection = task.spawn(function()
            while autoFish do
                local args = {
                    [1] = "{2d3056d8-fb58-42f3-88cf-33cc4eee5e2f}",
                    [2] = "Activate",
                    [3] = "Water"
                }
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Communication", 9e9)
                    :WaitForChild("Events", 9e9)
                    :GetChildren()[13]:FireServer(unpack(args))
                task.wait(0.5)
            end
        end)
    else
        autoFishConnection = nil
    end
end)


-- === Shop Buttons ===
ShopSection:NewButton("Rope", "Buys Rope from Mainland Shop", function()
    local args = {"BuyShopItem", "Mainland Shop", 1, 1000}
    game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
        :WaitForChild("Events", 9e9):GetChildren()[18]:FireServer(unpack(args))
end)

ShopSection:NewButton("Tin", "Buys Tin from Mainland Shop", function()
    local args = {"BuyShopItem", "Mainland Shop", 10, 1000}
    game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
        :WaitForChild("Events", 9e9):GetChildren()[18]:FireServer(unpack(args))
end)

ShopSection:NewButton("Craft Tin Lassos", "Crafts 1000 Tin Lassos", function()
    local args = {"Craft", {id = 18, variants = {}, amt = 1000}}
    game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
        :WaitForChild("Events", 9e9):GetChildren()[9]:FireServer(unpack(args))
end)

-- === Shop Toggles ===
local autoBasketEnabled = false
ShopSection:NewToggle("Auto Basket", "Fires Remote[16] every 0.1s with Trade args", function(state)
    autoBasketEnabled = state
    if state then
        task.spawn(function()
            while autoBasketEnabled do
local args = {
    [1] = "";
    [2] = "Trade";
    [3] = "goldenAppleBasket";
}

game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Functions", 9e9):GetChildren()[16]:FireServer(unpack(args))

                task.wait(0.06)
            end
        end)
    end
end)

local autoBasketEnabled = false
ShopSection:NewToggle("Auto Basket", "Fires Remote[16] every 0.1s with Trade args", function(state)
    autoBasketEnabled = state
    if state then
        task.spawn(function()
            while autoBasketEnabled do
local args = {
    [1] = "";
    [2] = "Trade";
    [3] = "goldenAppleBasket";
}

game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Functions", 9e9):GetChildren()[16]:FireServer(unpack(args))

                task.wait(0.06)
            end
        end)
    end
end)

local buyApplesEnabled = false
ShopSection:NewToggle("Buy Apples", "Buys Apples from Farm Shop every 0.9s", function(state)
    buyApplesEnabled = state
    if state then
        task.spawn(function()
            while buyApplesEnabled do
local args = {
    [1] = "BuyShopItem";
    [2] = "Farm Shop";
    [3] = 6;
    [4] = 1000;
}

game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9):GetChildren()[18]:FireServer(unpack(args))

                task.wait(0.1)
            end
        end)
    end
end)


local ticketsEnabled = false
ShopSection:NewToggle("Tickets", "Buys Apples from Farm Shop every 0.4s", function(state)
    ticketsEnabled = state
    if state then
        task.spawn(function()
            while ticketsEnabled do
local args = {
    [1] = "";
    [2] = "Trade";
    [3] = "summerCarnival";
}

game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Functions", 9e9):GetChildren()[15]:FireServer(unpack(args))
                task.wait(0.4)
            end
        end)
    end
end)

local autofeedgEnabled = false
ShopSection:NewToggle("autofeedg", "Buys Apples from Farm Shop every 0.4s", function(state)
    autofeedgEnabled = state
    if state then
        task.spawn(function()
            while autofeedgEnabled do
    local args = {
    [1] = "{bb9d1f45-bf97-450d-84cb-03745d633e8b}";
    [2] = "Activate";
}

game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9):GetChildren()[10]:FireServer(unpack(args))
                task.wait(0.4)
            end
        end)
    end
end)

local trainticketsEnabled = false
ShopSection:NewToggle("train tickets", "Buys Apples from Farm Shop every 0.4s", function(state)
    trainticketsEnabled = state
    if state then
        task.spawn(function()
            while trainticketsEnabled do
local args = {
    [1] = "";
    [2] = "Trade";
    [3] = "trainingReceipts";
}

game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Functions", 9e9):GetChildren()[16]:FireServer(unpack(args))
                task.wait(0.1)
            end
        end)
    end
end)


local autocollectEnabled = false

ShopSection:NewToggle("Auto Collect", "Collects from all islands every 0.1s", function(state)
    autocollectEnabled = state
    if state then
        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Events = ReplicatedStorage:WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9)
            local CollectEvent = Events:GetChildren()[12]
            local IslandsFolder = workspace:WaitForChild("Islands", 9e9)

            while autocollectEnabled do
                for _, island in pairs(IslandsFolder:GetChildren()) do
                    if island:IsA("Folder") or island:IsA("Model") then
                        for _, uuidModel in pairs(island:GetChildren()) do
                            if uuidModel:IsA("Model") and uuidModel.Name:match("^%b{}$") then
                                local args = {
                                    [1] = "Collect",
                                    [2] = uuidModel,
                                }
                                CollectEvent:FireServer(unpack(args))
                            end
                        end
                    end
                end
                task.wait(0.5)
            end
        end)
    end
end)
