-- // Pilgrmageddon Automation GUI (Standalone with Toggle Keybind) // --

-- Services
local UIS = game:GetService("UserInputService")

-- ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "PilgrmageddonGUI"
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false

-- Main Frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 350)
Frame.Position = UDim2.new(0.3, 0, 0.2, 0)
Frame.BackgroundColor3 = Color3.fromRGB(30,30,30)
Frame.Parent = ScreenGui

-- Title
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.BackgroundColor3 = Color3.fromRGB(45,45,45)
Title.Text = "Pilgrmageddon Automation"
Title.TextColor3 = Color3.fromRGB(255,255,255)
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 18
Title.Parent = Frame

-- Draggable system
local dragging, dragInput, dragStart, startPos

Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Keybind to toggle GUI (V)
local guiVisible = true
UIS.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == Enum.KeyCode.V then
        guiVisible = not guiVisible
        Frame.Visible = guiVisible
    end
end)

-- Button Maker
local function createButton(name, yPos, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -20, 0, 30)
    btn.Position = UDim2.new(0, 10, 0, yPos)
    btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
    btn.Text = name
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 16
    btn.Parent = Frame
    btn.MouseButton1Click:Connect(callback)
end

-- Toggle Maker
local function createToggle(name, yPos, stateVar, toggleFunc)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -20, 0, 30)
    btn.Position = UDim2.new(0, 10, 0, yPos)
    btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
    btn.Text = name .. " [OFF]"
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 16
    btn.Parent = Frame
    
    btn.MouseButton1Click:Connect(function()
        _G[stateVar] = not _G[stateVar]
        btn.Text = name .. (_G[stateVar] and " [ON]" or " [OFF]")
        if _G[stateVar] then
            task.spawn(toggleFunc)
        end
    end)
end

-- === Player Setup ===
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(char) character = char end)

-- === Functions ===
local function enableGodMode()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            humanoid.Health = humanoid.MaxHealth
        end)
        humanoid.MaxHealth = math.huge
        humanoid.Health = math.huge
    end
end

local function setInfiniteMana()
    local mana = character:FindFirstChild("Mana")
    if mana then
        mana.Changed:Connect(function() mana.Value = math.huge end)
        mana.Value = math.huge
    end
end

local function deleteNametags()
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        local nametag = otherPlayer:FindFirstChild("PlayerGui") and otherPlayer.PlayerGui:FindFirstChild("Nametag")
        if nametag then nametag:Destroy() end
    end
end

_G.ChestRunning = false
local function autoChests()
    while _G.ChestRunning do
        for _, chest in pairs(workspace:GetDescendants()) do
            if chest.Name == "Chest" and chest:IsA("Model") and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = chest:GetModelCFrame() + Vector3.new(0,3,0)
                task.wait(0.5)
                if chest:FindFirstChild("ClickDetector") then
                    fireclickdetector(chest.ClickDetector)
                end
            end
        end
        task.wait(5)
    end
end

_G.MirrorRunning = false
local function autoMirrors()
    while _G.MirrorRunning do
        for _, mirror in pairs(workspace:GetDescendants()) do
            if mirror.Name == "Mirror" and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = mirror.CFrame + Vector3.new(0,3,0)
                task.wait(0.5)
                if mirror:FindFirstChild("ClickDetector") then
                    fireclickdetector(mirror.ClickDetector)
                end
            end
        end
        task.wait(5)
    end
end

local function setHighDamage()
    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
            local damageValue = tool:FindFirstChild("Damage")
            if damageValue then damageValue.Value = 99999 end
        end
    end
end

-- === GUI Buttons ===
createButton("Enable God Mode", 50, enableGodMode)
createButton("Set Infinite Mana", 90, setInfiniteMana)
createButton("Delete Nametags", 130, deleteNametags)
createToggle("Auto Chests", 170, "ChestRunning", autoChests)
createToggle("Auto Mirrors", 210, "MirrorRunning", autoMirrors)
createButton("Set High Damage", 250, setHighDamage)
