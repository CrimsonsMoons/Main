----- === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

local AutoTab = Window:NewTab("Auto")
local AutoSection = AutoTab:NewSection("Automation")

local ShopTab = Window:NewTab("Shop")
local ShopSection = ShopTab:NewSection("Shop Items")

local LunarVolcanoTab = Window:NewTab("Lunar/Volcano")
local LunarVolcanoSection = LunarVolcanoTab:NewSection("Special Teleports & Lava")

-- === Initialization ===
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local islandsFolder = workspace:WaitForChild("Islands")
local explorerFolder = workspace:FindFirstChild("Explorer")

player.CharacterAdded:Connect(function(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end)

-- === Helpers ===
local function safeTP(pos)
    if hrp and hrp.Parent then
        hrp.CFrame = CFrame.new(pos)
        return true
    end
    return false
end

local function isBasepart(x) return typeof(x) == "Instance" and x:IsA("BasePart") end

local function getExplorerFolder()
    -- refresh pointer in case itâ€™s created later
    explorerFolder = explorerFolder or workspace:FindFirstChild("Explorer")
    return explorerFolder
end

local function getRemoteAndCall(args)
    local comms = game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
    local container = comms:FindFirstChild("Functions") or comms:FindFirstChild("Events")
    if not container then return end
    local target = container:GetChildren()[2]
    if not target then return end
    if target.ClassName == "RemoteFunction" then
        pcall(function() target:InvokeServer(unpack(args)) end)
    elseif target.ClassName == "RemoteEvent" then
        pcall(function() target:FireServer(unpack(args)) end)
    end
end

-- === Island Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
}

-- === Universal Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
    ["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true,
}

-- === Collect Body parts for an island ===
local function getAllBodies(islandName)
    local bodies = {}

    -- Workspace direct children
    for _, model in ipairs(workspace:GetChildren()) do
        if not exclusions[model.Name] then
            local body = model:FindFirstChild("Body")
            if isBasepart(body) then table.insert(bodies, body) end
        end
    end

    -- Islands/<islandName>
    local folder = islandsFolder:FindFirstChild(islandName)
    if folder then
        for _, model in ipairs(folder:GetChildren()) do
            if not exclusions[model.Name] then
                local body = model:FindFirstChild("Body")
                if isBasepart(body) then table.insert(bodies, body) end
            end
        end
    end

    -- Explorer/<islandName>
    local exp = getExplorerFolder()
    if exp then
        local f = exp:FindFirstChild(islandName)
        if f then
            for _, model in ipairs(f:GetChildren()) do
                if not exclusions[model.Name] then
                    loc
