--- === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs and Sections ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

-- === Player Setup ===
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- Wait for Islands folder safely
local islandsFolder = Workspace:WaitForChild("Islands", 10)
local explorerFolder = Workspace:FindFirstChild("Explorer") -- optional

-- Update HRP on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HRP = Character:WaitForChild("HumanoidRootPart")
end)

-- === Island Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
    ["The Magical Forest"] = {},
}

-- === Universal Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
}

-- === Function to get all UUID Body parts ===
local function getAllBodies(islandName)
    local bodies = {}

    -- Islands folder
    local folder = islandsFolder:FindFirstChild(islandName)
    if folder then
        for _, model in ipairs(folder:GetChildren()) do
            if not exclusions[model.Name] then
                local body = model:FindFirstChild("Body")
                if body and body:IsA("BasePart") then
                    table.insert(bodies, body)
                end
            end
        end
    end

    -- Workspace top-level UUIDs
    for _, model in ipairs(Workspace:GetChildren()) do
        if model:IsA("Model") and model.Name:match("^%b{}$") and not exclusions[model.Name] then
            local body = model:FindFirstChild("Body")
            if body and body:IsA("BasePart") then
                table.insert(bodies, body)
            end
        end
    end

    -- Explorer folder if exists
    if explorerFolder then
        local folder = explorerFolder:FindFirstChild(islandName)
        if folder then
            for _, model in ipairs(folder:GetChildren()) do
                if not exclusions[model.Name] then
                    local body = model:FindFirstChild("Body")
                    if body and body:IsA("BasePart") then
                        table.insert(bodies, body)
                    end
                end
            end
        end
    end

    return bodies
end

-- === Teleport Toggles ===
local teleportToggles = {}

for islandName, _ in pairs(islandConfigs) do
    teleportToggles[islandName] = false

    TeleportSection:NewToggle("Teleport " .. islandName, "Teleport to " .. islandName, function(state)
        teleportToggles[islandName] = state
    end)

    -- Use RenderStepped instead of task.spawn loop for safety
    RunService.RenderStepped:Connect(function()
        if teleportToggles[islandName] then
            local bodies = getAllBodies(islandName)
            for _, body in ipairs(bodies) do
                if body and body:IsDescendantOf(Workspace) then
                    HRP.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                    break -- only teleport to the first available body per frame
                end
            end
        end
    end)
end
