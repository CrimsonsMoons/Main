local Players = game:GetService("Players") 
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = Character:WaitForChild("HumanoidRootPart")

----- Reconnect HRP on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    hrp = Character:WaitForChild("HumanoidRootPart")
end)

local uuids = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

local function isUUID(str)
    return string.match(str, "^%b{}$") ~= nil
end

local function getNPCs()
    local folder = workspace.Islands["Training Island"]
    local npcList = {}

    for _, uuid in ipairs(uuids) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                model.PrimaryPart = root
                table.insert(npcList, model)
            end
        end
    end

    for _, model in ipairs(folder:GetDescendants()) do
        if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

local jumpRunning = false
local jumpTask

local function freezeJumpLoop(npcs)
    if jumpRunning then return end
    jumpRunning = true
    jumpTask = task.spawn(function()
        while jumpRunning do
            -- Freeze player in jump state
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                local hrp = char:FindFirstChild("HumanoidRootPart")
                if humanoid and hrp and humanoid.Health > 0 then
                    humanoid.Jump = true
                    humanoid.PlatformStand = true
                    hrp.Anchored = true
                end
            end

            -- Freeze NPCs in jump state
            for _, npc in ipairs(npcs) do
                if npc and npc.Parent then
                    local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
                    local root = npc.PrimaryPart
                    if humanoid and root and humanoid.Health > 0 then
                        humanoid.Jump = true
                        humanoid.PlatformStand = true
                        root.Anchored = true
                    end
                end
            end

            task.wait(0.1)
        end
    end)
end

local function unfreezeJumpLoop(npcs)
    jumpRunning = false
    if jumpTask then
        task.cancel(jumpTask)
        jumpTask = nil
    end

    local char = LocalPlayer.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if humanoid and hrp then
            humanoid.PlatformStand = false
            hrp.Anchored = false
        end
    end

    for _, npc in ipairs(npcs) do
        if npc and npc.Parent then
            local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
            local root = npc.PrimaryPart
            if humanoid and root then
                humanoid.PlatformStand = false
                root.Anchored = false
            end
        end
    end
end

local function workspaceHasImmediatePartNamedPart()
    for _, child in ipairs(workspace:GetChildren()) do
        if child.Name == "Part" then
            return true
        end
    end
    return false
end

local running = false
local teleportTask

local function teleportToPart(npcs)
    -- If there's no *immediate* child of workspace named "Part", run the RemoteEvent code
    if not workspaceHasImmediatePartNamedPart() then
        print("[Teleport] No immediate workspace child named 'Part' -> firing RemoteEvent #37")

        local args = {
            [1] = "TriggerInteractable";
            [2] = workspace:WaitForChild("Islands", 9e9)
                :WaitForChild("Training Island", 9e9)
                :WaitForChild("Cross Country", 9e9)
                :WaitForChild("CheckpointActivity", 9e9);
        }

        local eventsFolder = game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9)
        local eventsChildren = eventsFolder:GetChildren()
        local event = eventsChildren[37]

        if event and type(event.FireServer) == "function" then
            event:FireServer(unpack(args))
            print("[Teleport] Fired RemoteEvent #37")
        else
            warn("[Teleport] RemoteEvent #37 not found or invalid")
        end

        return
    end

    -- Otherwise, teleport to workspace.Part (immediate child)
    local targetPart = workspace:FindFirstChild("Part")
    if not targetPart or not targetPart:IsA("BasePart") then
        warn("[Teleport] Found a workspace child named 'Part' but it's not a BasePart")
        return
    end

    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if hrp and hrp.Parent then
        hrp.CFrame = targetPart.CFrame + Vector3.new(2, 3, 0)
    end

    for _, npc in ipairs(npcs) do
        if npc.PrimaryPart and npc.PrimaryPart.Parent then
            npc:SetPrimaryPartCFrame(targetPart.CFrame + Vector3.new(-2, 3, 0))
        end
    end
end

local function startLoop()
    teleportTask = task.spawn(function()
        local npcs = getNPCs()
        freezeJumpLoop(npcs)
        while running do
            teleportToPart(npcs)
            task.wait(1.4)
        end
        unfreezeJumpLoop(npcs)
    end)
end

-- GUI Setup
local screenGui = Instance.new("ScreenGui", PlayerGui)
screenGui.Name = "TeleportToggleGui"
screenGui.ResetOnSpawn = false

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 160, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 24
button.Text = "Start Teleport"
button.Parent = screenGui

button.MouseButton1Click:Connect(function()
    running = not running
    if running then
        button.Text = "Stop Teleport"
        startLoop()
    else
        button.Text = "Start Teleport"
        if teleportTask then
            task.cancel(teleportTask)
            teleportTask = nil
        end
        unfreezeJumpLoop(getNPCs())
    end
end)
