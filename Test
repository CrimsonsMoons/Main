--- === GUI Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Auto Catch Test", "DarkTheme")

local MainTab = Window:NewTab("Main")
local MainSection = MainTab:NewSection("Auto Catch Toggles")

-- Toggle states
local autoCatch1Enabled, autoCatch2Enabled, autoCatch3Enabled = false, false, false

MainSection:NewToggle("Auto Catch 1", "Enable Auto Catch 1", function(state)
    autoCatch1Enabled = state
end)

MainSection:NewToggle("Auto Catch 2", "Enable Auto Catch 2", function(state)
    autoCatch2Enabled = state
end)

MainSection:NewToggle("Auto Catch 3", "Enable Auto Catch 3", function(state)
    autoCatch3Enabled = state
end)

-- === Services ===
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- === Settings ===
local CATCH_RADIUS = 15
local CATCH_COOLDOWN = 1
local lastCaught = {}

-- === Tool UUIDs (these should correspond to actual tools in your Backpack/Character) ===
local TOOL_UUIDS_1 = {"{4ba69e17-8de2-43a2-ac9a-f1d1e425be9b}", "{634dc3c2-1694-4273-92d2-adf8f7ade91f}"}
local TOOL_UUIDS_2 = {"{b3766c24-da18-40f0-be56-66dba5e882d8}", "{cd4c34c5-99a6-4f28-ac73-bfad7c8e1ca2}"}
local TOOL_UUIDS_3 = {"{634dc3c2-1694-4273-92d2-adf8f7ade91f}", "{06905d54-7826-417e-bfc7-82d326a30885}"}

-- === Exclusions ===
local EXCLUSIONS = {
    ["Horse"]=true, ["Travel Boat"]=true
}

-- === Islands to scan per auto-catch ===
local ISLANDS_1 = {"Mainland","Forest Island","Mountain Island","Lunar Islands","Royal Island","Blizzard Island","Jungle Island","Volcano Island","Desert Island"}
local ISLANDS_2 = {"Mountain Island","Royal Island","Desert Island","Glacier Island"}
local ISLANDS_3 = {"Lunar Islands","Jungle Island","Volcano Island"}

-- === Find RemoteEvent dynamically ===
local Communication = ReplicatedStorage:WaitForChild("Communication")
local EventsFolder = Communication:WaitForChild("Events")
local remote = nil
for _, ev in ipairs(EventsFolder:GetChildren()) do
    if ev:IsA("RemoteEvent") then
        remote = ev
        print("Using RemoteEvent:", ev.Name)
        break
    end
end
if not remote then
    warn("RemoteEvent not found!")
    return
end

-- === Utility ===
local function isUUID(name)
    return typeof(name) == "string" and name:match("^%b{}$") ~= nil
end

-- Get tool instances by UUID strings
local function getToolByUUID(uuid)
    local tool = LocalPlayer.Backpack:FindFirstChild(uuid) or Character:FindFirstChild(uuid)
    return tool
end

local function tryCatch(enabled, toolList, islands)
    if not enabled then return end
    local playerPos = HumanoidRootPart.Position

    -- Check islands
    for _, islandName in ipairs(islands) do
        local islandFolder = Workspace:FindFirstChild("Islands") and Workspace.Islands:FindFirstChild(islandName)
        if islandFolder then
            for _, model in ipairs(islandFolder:GetChildren()) do
                local body = model:FindFirstChild("Body")
                if body and isUUID(model.Name) and not EXCLUSIONS[model.Name] then
                    local dist = (body.Position - playerPos).Magnitude
                    local now = os.clock()
                    if dist <= CATCH_RADIUS and (not lastCaught[model] or now - lastCaught[model] > CATCH_COOLDOWN) then
                        for _, uuid in ipairs(toolList) do
                            local tool = getToolByUUID(uuid)
                            if tool then
                                remote:FireServer(tool.Name, "Activate", model)
                                print("Fired remote on:", model.Name, "with tool:", tool.Name, "Dist:", math.floor(dist))
                            end
                        end
                        lastCaught[model] = now
                    end
                end
            end
        end
    end

    -- Top-level Workspace
    for _, model in ipairs(Workspace:GetChildren()) do
        local body = model:FindFirstChild("Body")
        if body and isUUID(model.Name) and not EXCLUSIONS[model.Name] then
            local dist = (body.Position - playerPos).Magnitude
            local now = os.clock()
            if dist <= CATCH_RADIUS and (not lastCaught[model] or now - lastCaught[model] > CATCH_COOLDOWN) then
                for _, uuid in ipairs(toolList) do
                    local tool = getToolByUUID(uuid)
                    if tool then
                        remote:FireServer(tool.Name, "Activate", model)
                        print("Fired remote on top-level:", model.Name, "with tool:", tool.Name, "Dist:", math.floor(dist))
                    end
                end
                lastCaught[model] = now
            end
        end
    end
end

-- === Main Loop ===
spawn(function()
    while true do
        tryCatch(autoCatch1Enabled, TOOL_UUIDS_1, ISLANDS_1)
        tryCatch(autoCatch2Enabled, TOOL_UUIDS_2, ISLANDS_2)
        tryCatch(autoCatch3Enabled, TOOL_UUIDS_3, ISLANDS_3)
        task.wait(0.05)
    end
end)
